[alias]
        # View abbreviated SHA, description, and history graph of the latest 20 commits
        # lg = log --graph --abbrev-commit --decorate --date=iso --format=format:'%C(blue)%h%C(reset) %C(normal)-%C(reset)%C(red)%d%C(reset) %C(normal)%s%C(reset)'  --all
        lg = log --graph --abbrev-commit --decorate --date=local \
        --format=format:'%C(black)%h%C(reset)\t%C(black)%C(reset) %C(normal)%<(24,trunc)%ad%C(reset) %C(black).%C(reset)%C(green)%d%C(reset) %C(normal)%s%C(reset) %C(black).%C(reset) %C(black)%an%C(reset)'  --all
        lgs = !"git lg -15"
        lb = log --graph --simplify-by-decoration --pretty=format:'%d' --all
        # View the current working tree status using the short format
        s = status -sb
        # Show the diff between the latest commit and the current state
        d = difftool
        diffw = diff --word-diff=color
        # `git di $number` shows the diff between the state `$number` revisions ago and the current state
        di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
        # Pull in remote changes for the current repository and all its submodules
        p = !"git pull; git submodule foreach git pull origin master"
        # Clone a repository including all submodules
        c = clone --recursive
        # Commit all changes
        ca = !git add -A && git commit -av
        # Switch to a branch, creating it if necessary
        go = checkout -B
        # Show verbose output about tags, branches or remotes
        tags = tag -l
        branches = branch -a
        remotes = remote -v
        # Credit an author on the latest commit
        credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
        # Interactive rebase with the given number of latest commits
        reb = "!r() { git rebase -i HEAD~$1; }; r"
        # Remove all deleted files
        rma = !git rm $(git ls-files -d)
        g = grep --break --heading --line-number

[apply]
        # Detect whitespace errors when applying a patch
        whitespace = fix

[core]
        # Use custom `.gitignore` and `.gitattributes`
        excludesfile = ~/.gitignore
        attributesfile = ~/.gitattributes
        # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
        whitespace = space-before-tab,indent-with-non-tab,cr-at-eol #,trailing-space
        pager = less -S -+x8

[color]
        # Use colors in Git commands that are capable of colored output when outputting to the terminal
        ui = auto

[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green

[color "diff"]
        meta = yellow
        frag = black
        old = red
        new = green
        whitespace = white reverse
        commit = blue

[color "status"]
        added = yellow
        changed = green
        untracked = cyan

[color "grep"]
        separator = green
        match = red

[merge]
        # Include summaries of merged commits in newly created merge commit messages
        log = true
        tool = vimdiff

[push]
        default = matching

[user]
        name = Giovanni Cavallanti
        email = ioacvl@ioacvl.com

[credential]
        helper = cache --timeout=3600

[grep]
        lineNumber = true
        extendRegexp = true
[diff]
        tool = vimdiff
[difftool]
        prompt = false
